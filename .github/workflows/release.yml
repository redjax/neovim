---
## Manually trigger pipeline to create a release with .zip and .tar.gz archives of Neovim configurations
#
#  This pipeline creates .zip and .tar.gz files in a release for every Neovim configuration in the config/ directory.
#  You can choose to bump major (vX.0.0), minor (v0.X.0), or patch (v0.0.X) versions.
#
#  Each archive contains the configuration files structured so they can be extracted directly
#  to ~/.config/nvim (Linux/macOS) or %USERPROFILE%\AppData\Local\nvim (Windows).
name: Manual Release

on:
  ## Trigger workflow manually with version bump type selection
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:

      ## Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      ## Setup Python for version parsing
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      ## Get the latest tag for version calculation
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          
          ## If no tags exist, start with v0.0.0
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      ## Calculate new version based on input parameter
      - name: Calculate new version
        id: new_version
        run: |
          LATEST="${{ steps.get_tag.outputs.latest_tag }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST#v}"
          
          case "${{ github.event.inputs.version_bump }}" in
            major)
              NEW_TAG="v$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_TAG="v$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            *)
              echo "Invalid version bump type: ${{ github.event.inputs.version_bump }}"
              exit 1
              ;;
          esac
          
          echo "Bumping from $LATEST to $NEW_TAG (type: ${{ github.event.inputs.version_bump }})"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      ## Discover available Neovim configurations
      - name: Discover configurations
        id: discover_configs
        run: |
          CONFIGS=""
          echo "Available configurations:"
          
          for dir in config/*/; do
            if [ -d "$dir" ]; then
              name=$(basename "$dir")
              echo "  - $name"
              if [ -z "$CONFIGS" ]; then
                CONFIGS="$name"
              else
                CONFIGS="$CONFIGS,$name"
              fi
            fi
          done

          echo "configs=$CONFIGS" >> "$GITHUB_OUTPUT"

      ## Create archives for each configuration
      - name: Create release archives
        id: create_archives
        run: |
          mkdir -p release-assets
          VERSION="${{ steps.new_version.outputs.new_tag }}"
          
          echo "Creating archives for version: $VERSION"
          echo ""
          
          IFS=',' read -ra CONFIG_ARRAY <<< "${{ steps.discover_configs.outputs.configs }}"
          for config in "${CONFIG_ARRAY[@]}"; do
            echo "Processing configuration: $config"
            
            config_dir="config/$config"
            if [ ! -d "$config_dir" ]; then
              echo "  Warning: Directory $config_dir not found, skipping..."
              continue
            fi
            
            ## File names for archives
            zip_name="${config}-${VERSION}.zip"
            tar_name="${config}-${VERSION}.tar.gz"
            
            echo "  Creating: $zip_name"
            echo "  Creating: $tar_name"
            
            ## Create temporary directory structure
            temp_dir="temp-$config"
            mkdir -p "$temp_dir/nvim"
            
            ## Copy configuration files to temp/nvim/
            cp -r "$config_dir"/* "$temp_dir/nvim/"
            
            ## Create ZIP archive
            (
              cd "$temp_dir"
              zip -r "../release-assets/$zip_name" nvim -x "*.DS_Store" "*.git*"
            )
            
            ## Create TAR.GZ archive
            (
              cd "$temp_dir"
              tar --exclude="*.DS_Store" --exclude="*.git*" -czf "../release-assets/$tar_name" nvim
            )
            
            ## Clean up temp directory
            rm -rf "$temp_dir"
            
            echo "  âœ“ Archives created successfully"
            echo ""
          done
          
          echo "Archive creation completed!"
          echo ""
          echo "Created files:"
          ls -la release-assets/

      ## Create and push new Git tag
      - name: Create and push Git tag
        run: |
          NEW_TAG="${{ steps.new_version.outputs.new_tag }}"
          echo "Creating and pushing tag: $NEW_TAG"
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

      ## Create GitHub release with all archives
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.new_version.outputs.new_tag }}
          name: Release ${{ steps.new_version.outputs.new_tag }}
          body: |
            ## Neovim Configuration Release ${{ steps.new_version.outputs.new_tag }}
            
            This release contains packaged Neovim configurations ready for installation.
            
            ### Available Configurations
            ${{ steps.discover_configs.outputs.configs }}
            
            ### Installation Instructions
            
            1. Download the archive for your desired configuration
            2. Extract the archive to get the `nvim/` folder
            3. Place the `nvim/` folder in your configuration directory:
               - **Linux/macOS**: `~/.config/nvim`
               - **Windows**: `%USERPROFILE%\AppData\Local\nvim`
            
            ### Archive Formats
            - `.zip` files: Compatible with all platforms, recommended for Windows
            - `.tar.gz` files: Compressed format, recommended for Linux/macOS
            
            Both formats contain identical configuration files.
          generate_release_notes: true
          token: ${{ secrets.RELEASE_TOKEN }}
          files: release-assets/*
